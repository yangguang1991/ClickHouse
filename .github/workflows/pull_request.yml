# yamllint disable rule:comments-indentation
name: PullRequestCI

env:
  # Force the stdout and stderr streams to be unbuffered
  PYTHONUNBUFFERED: 1
  S3_CI_REPORTS: 'clickhouse-builds/CI_data'

on:  # yamllint disable-line rule:truthy
  pull_request:
    types:
      - synchronize
      - reopened
      - opened
    branches:
      - master
    paths-ignore:
      - '**.md'
      - 'docker/docs/**'
      - 'docs/**'
      - 'utils/check-style/aspell-ignore/**'
      - 'tests/ci/docs_check.py'
      - '.github/workflows/docs_check.yml'
##########################################################################################
##################################### SMALL CHECKS #######################################
##########################################################################################
jobs:
  # CheckLabels:
  #   runs-on: [self-hosted, style-checker]
  #   # Run the first check always, even if the CI is cancelled
  #   if: ${{ always() }}
  #   steps:
  #     - name: Check out repository code
  #       uses: ClickHouse/checkout@v1
  #       with:
  #         clear-repository: true
  #     - name: Labels check
  #       run: |
  #         cd "$GITHUB_WORKSPACE/tests/ci"
  #         python3 run_check.py
  ToDoList:
    runs-on: [self-hosted] # it is fast - run on any available runner
    outputs:
      DOCKER_DIGEST: ${{ steps.todo.outputs.DOCKER_DIGEST }}
      DOCKER_IMAGES_WITH_DIGESTS: ${{ steps.todo.outputs.DOCKER_IMAGES_WITH_DIGESTS }}
      #DOCKER_MISSING_IMAGES: ${{ steps.todo.outputs.DOCKER_MISSING_IMAGES }}
      DOCKER_MISSING_AARCH64_IMAGES: ${{ steps.todo.outputs.DOCKER_MISSING_AARCH64_IMAGES }}
      DOCKER_MISSING_AMD64_IMAGES: ${{ steps.todo.outputs.DOCKER_MISSING_AMD64_IMAGES }}

      STATELESS_TEST_DIGEST: ${{ steps.todo.outputs.STATELESS_TEST_DIGEST }}
      STATEFUL_TEST_DIGEST: ${{ steps.todo.outputs.STATEFUL_TEST_DIGEST }}
      INTEGRATION_TEST_DIGEST: ${{ steps.todo.outputs.INTEGRATION_TEST_DIGEST }}
      STRESS_TEST_DIGEST: ${{ steps.todo.outputs.STRESS_TEST_DIGEST }}
      FAST_TEST_DIGEST: ${{ steps.todo.outputs.FAST_TEST_DIGEST }}
      ALL_DIGEST: ${{ steps.todo.outputs.ALL_DIGEST }}

      jobs_to_skip: ${{ steps.todo.outputs.jobs_to_skip }}
      jobs_to_do: ${{ steps.todo.outputs.jobs_to_do }}

      S3_BUILD_REPORT_PATH: ${{ steps.todo.outputs.S3_BUILD_REPORT_PATH }}
      S3_DOCKER_REPORT_PATH: ${{ steps.todo.outputs.S3_DOCKER_REPORT_PATH }}
    steps:
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          clear-repository: true # to ensure correct digests
          ref: ${{ github.event.after }} # no merge commit
      # - name: CI python unit tests
      #   run: |
      #     cd "$GITHUB_WORKSPACE/tests/ci"
      #     echo "Testing the main ci directory"
      #     python3 -m unittest discover -s . -p '*_test.py'
      #     for dir in *_lambda/; do
      #       echo "Testing $dir"
      #       python3 -m unittest discover -s "$dir" -p '*_test.py'
      #     done
      - name: PrepareToDoList
        id: todo
        run: |
            # Check docker images:
            # FIXME: login to dockerhub?
            aws ssm get-parameter --region us-east-1 --name dockerhub_robot_password --query 'Parameter.Value' --output=text --with-decryption \
            | docker login --username robotclickhouse --password-stdin
            python3 "$GITHUB_WORKSPACE/tests/ci/digester.py" --docker all --outfile ${{ runner.temp }}/docker-images.json
            # python3 "$GITHUB_WORKSPACE/tests/ci/check_missing_artifacts.py" --docker \
            #   --infile ${{ runner.temp }}/docker-images.json \
            #   --outfile ${{ runner.temp }}/missing-multiarch-images.json
            python3 "$GITHUB_WORKSPACE/tests/ci/check_missing_artifacts.py" --docker --aarch64 \
              --infile ${{ runner.temp }}/docker-images.json \
              --outfile ${{ runner.temp }}/missing-aarch64-images.json
            python3 "$GITHUB_WORKSPACE/tests/ci/check_missing_artifacts.py" --docker --amd64 \
              --infile ${{ runner.temp }}/docker-images.json \
              --outfile ${{ runner.temp }}/missing-amd64-images.json
            {
              # echo 'DOCKER_MISSING_IMAGES<<EOF'
              # cat  ${{ runner.temp }}/missing-multiarch-images.json
              # echo 'EOF'
              echo 'DOCKER_MISSING_AARCH64_IMAGES<<EOF'
              cat  ${{ runner.temp }}/missing-aarch64-images.json
              echo 'EOF'
              echo 'DOCKER_MISSING_AMD64_IMAGES<<EOF'
              cat  ${{ runner.temp }}/missing-amd64-images.json
              echo 'EOF'
              echo 'DOCKER_IMAGES_WITH_DIGESTS<<EOF'
              cat  ${{ runner.temp }}/missing-amd64-images.json
              echo 'EOF'
            } >> "$GITHUB_OUTPUT"
            DOCKER_DIGEST="$(python3 "$GITHUB_WORKSPACE/tests/ci/digester.py" --docker total)"
            echo "DOCKER_DIGEST=$DOCKER_DIGEST" >> "$GITHUB_OUTPUT"
            # cat ${{ runner.temp }}/missing-multiarch-images.json ${{ runner.temp }}/missing-amd64-images.json  ${{ runner.temp }}/missing-amd64-images.json ${{ runner.temp }}/docker-images.json

            source "$GITHUB_WORKSPACE/tests/ci/digest_files.sh" >> "$GITHUB_OUTPUT"
            cat "$GITHUB_OUTPUT"
            S3_DOCKER_REPORT_PATH="$S3_CI_REPORTS/docker-$DOCKER_DIGEST"
            S3_BUILD_REPORT_PATH="$S3_CI_REPORTS/$BUILD_DIGEST"

            function should_do_job() {
              if  aws s3 ls "$S3_BUILD_REPORT_PATH/.ci_$1" > /dev/null; then
                return 1
              else
                return 0
              fi
            }

            function should_do_digested_job() {
              if  aws s3 ls "$S3_BUILD_REPORT_PATH/.ci_$1_$2" > /dev/null; then
                return 1
              else
                return 0
              fi
            }

            function should_do_docker_job() {
              job="$1"
              if  aws s3 ls "$S3_DOCKER_REPORT_PATH/.ci_$job.ci" > /dev/null; then
                return 1
              else
                return 0
              fi
            }

            JOB_DIGEST_ARRAY=( \
              StyleCheck                                         "$ALL_DIGEST" \
              FastTest                                           "$FAST_TEST_DIGEST" \
              FunctionalStatelessTestRelease                     "$STATELESS_TEST_DIGEST" \
              FunctionalStatelessTestReleaseDatabaseReplicated0  "$STATELESS_TEST_DIGEST" \
              FunctionalStatefulTestRelease                      "$STATEFUL_TEST_DIGEST" \
              FunctionalStatelessTestS3Debug0                    "$STATELESS_TEST_DIGEST" \
              IntegrationTestsRelease0                           "$INTEGRATION_TEST_DIGEST" \
              StressTestDebug                                    "$STRESS_TEST_DIGEST" \
            )

            JOB_NODIGEST_ARRAY=( \
              # Build jobs represented as build_name due to gh issues with job name with callable wf
              package_release \
              binary_release \
              package_debug \
              package_aarch64 \

              InstallPackagesTestRelease \
              UpgradeCheckDebug \
              PerformanceComparisonX86_0 \
              SQLTest \
              SQLLogicTestRelease \
              CompatibilityCheckAarch64 \
              CompatibilityCheckX86 \
            )

            DOCKER_JOBS=( \
              # Docker jobs checked separetly because done flags stored in s3 separatly, in dir named with DOCKER_DIGEST
              DockerBuildAmd64 \
              DockerBuildAarch64 \
              DockerMultiArchManifest \
            )

            JOBS_TO_SKIP="[ "
            JOBS_TO_DO="[ "

            for ((i=0; i<${#JOB_DIGEST_ARRAY[@]}; i+=2)); do
              job="${JOB_DIGEST_ARRAY[i]}"
              digest="${JOB_DIGEST_ARRAY[i+1]}"
              if should_do_digested_job "$job" "$digest"; then
                JOBS_TO_DO="${JOBS_TO_DO} '${job}',"
                echo "should_do_$job: true     digest: $digest"
              else
                JOBS_TO_SKIP="${JOBS_TO_SKIP} '${job}',"
                echo "should_do_$job: false    digest: $digest"
              fi
            done

            for job in "${JOB_NODIGEST_ARRAY[@]}"; do
              if should_do_job "$job"; then
                JOBS_TO_DO="${JOBS_TO_DO} '${job}',"
                echo "should_do_$job: true"
              else
                JOBS_TO_SKIP="${JOBS_TO_SKIP} '${job}',"
                echo "should_do_$job: false"
              fi
            done

            for job in "${DOCKER_JOBS[@]}"; do
              if should_do_docker_job "$job"; then
                JOBS_TO_DO="${JOBS_TO_DO} '${job}',"
                echo "should_do_$job: true"
              else
                JOBS_TO_SKIP="${JOBS_TO_SKIP} '${job}',"
                echo "should_do_$job: false"
              fi
            done

            JOBS_TO_SKIP="${JOBS_TO_SKIP} ]"
            JOBS_TO_DO="${JOBS_TO_DO} ]"

            echo "Jobs to do: $JOBS_TO_DO"
            echo "Jobs to skip: $JOBS_TO_SKIP"

            {
              echo "jobs_to_skip=$JOBS_TO_SKIP";
              echo "jobs_to_do=$JOBS_TO_DO";
              echo "S3_DOCKER_REPORT_PATH=$S3_DOCKER_REPORT_PATH"
              echo "S3_BUILD_REPORT_PATH=$S3_BUILD_REPORT_PATH"
              # echo "images_to_build_amd64=$IMAGE_TO_BE_BUILD_AMD64";
              # echo "images_to_build_aarch64=$IMAGE_TO_BE_BUILD_AARCH64";
            } >> "$GITHUB_OUTPUT"


            # FIXME: this is to check image wise what should be built. I switched to single digest per all docker that is used as a tag for all images
            #   more work for CI when smth is changed in docker dir but design is simple
            # function should_do_docker_image() {
            #   digest="$DOCKER_DIGEST"
            #   image="$1"
            #   arch="$2"
            #   if  aws s3 ls "$S3_CI_REPORTS/docker-$digest/.ci-$image-$arch" > /dev/null; then
            #     return 1
            #   else
            #     return 0
            #   fi
            # }
            # function should_do_docker_image_2() {
            #   # check directly in docker hub if image is there
            #   image="$1"
            #   image_digest="$2"
            #   arch="$2"
            #   if docker manifest inspect "clickhouse/${image}:${image_digest}-${arch}" > /dev/null; then
            #     return 1
            #   else
            #     return 0
            #   fi
            # }
            # DOCKER_IMAGES=( \
            #   test-util \
            # )
            # IMAGE_TO_BE_BUILD_AMD64='['
            # if should_do_docker_job_arch amd64; then
            #   JOBS_TO_DO="${JOBS_TO_DO} 'DockerBuildAmd64',"
            #   echo "should do docker for amd64: true"
            #   for image in "${DOCKER_IMAGES[@]}"; do
            #     if should_do_docker_image "$image" amd64; then
            #       echo "    $image: true"
            #       IMAGE_TO_BE_BUILD_AMD64="${IMAGE_TO_BE_BUILD_AMD64} '${image}',"
            #     else
            #       echo "    $image: false"
            #     fi
            #   done
            # else
            #   JOBS_TO_SKIP="${JOBS_TO_SKIP} 'DockerBuildAmd64',"
            #   echo "should do docker for amd64: false"
            # fi
            # IMAGE_TO_BE_BUILD_AMD64="${IMAGE_TO_BE_BUILD_AMD64} ]"

            # IMAGE_TO_BE_BUILD_AARCH64='['
            # if should_do_docker_job_arch aarch64; then
            #   JOBS_TO_DO="${JOBS_TO_DO} 'DockerBuildAarch64',"
            #   echo "should do docker for aarch64: true"
            #   for image in "${DOCKER_IMAGES[@]}"; do
            #     if should_do_docker_image "$image" aarch64; then
            #       echo "    $image: true"
            #       IMAGE_TO_BE_BUILD_AARCH64="${IMAGE_TO_BE_BUILD_AARCH64} '${image}',"
            #     else
            #       echo "    $image: false"
            #     fi
            #   done
            # else
            #   JOBS_TO_SKIP="${JOBS_TO_SKIP} 'DockerBuildAarch64',"
            #   echo "should do docker for aarch64: false"
            # fi
            # IMAGE_TO_BE_BUILD_AARCH64="${IMAGE_TO_BE_BUILD_AARCH64} ]"
            # echo "Images to build amd64: ${IMAGE_TO_BE_BUILD_AMD64}"
            # echo "Images to build aarch64: ${IMAGE_TO_BE_BUILD_AARCH64}"

  BuildDockers:
    needs: [ToDoList]
    uses: ./.github/workflows/reusable_docker.yml
    with:
      missing_aarch64: ${{ needs.ToDoList.outputs.DOCKER_MISSING_AARCH64_IMAGES }}
      missing_amd64: ${{ needs.ToDoList.outputs.DOCKER_MISSING_AMD64_IMAGES }}
      # missing_multi: ${{ needs.ToDoList.outputs.DOCKER_MISSING_IMAGES }}
      digests: ${{ needs.ToDoList.outputs.DOCKER_IMAGES_WITH_DIGESTS }}
      tag: ${{ needs.ToDoList.outputs.DOCKER_DIGEST }}
  # DockerBuildAarch64:
  #   needs: [ToDoList]
  #   runs-on: [self-hosted, style-checker-aarch64]
  #   if: |
  #     !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'DockerBuildAarch64')
  #   steps:
  #     - name: Docker login
  #       run: |
  #         aws ssm get-parameter --region us-east-1 --name dockerhub_robot_password --query 'Parameter.Value' --output=text --with-decryption \
  #           | docker login --username robotclickhouse --password-stdin
  #     - name: Check out repository code
  #       uses: ClickHouse/checkout@v1
  #       with:
  #         ref: ${{ github.event.after }}
  #     - name: Build images
  #       run: |
  #         python3 "${GITHUB_WORKSPACE}/tests/ci/docker_images_check_by_digest.py" --suffix aarch64 --tag "${{ needs.todolist.outputs.DOCKER_DIGEST }}"
  #     - name: Upload job done flag
  #       run: |
  #         FILE=".ci_${GITHUB_JOB}"
  #         touch "$FILE" && aws s3 cp "$FILE" "s3://$S3_CI_REPORTS/docker-${{ needs.todolist.outputs.DOCKER_DIGEST }}/" && rm "$FILE"
  # DockerBuildAmd64:
  #   needs: [ToDoList]
  #   runs-on: [self-hosted, style-checker]
  #   if: |
  #     !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'DockerBuildAmd64')
  #   steps:
  #     - name: Docker login
  #       run: |
  #         aws ssm get-parameter --region us-east-1 --name dockerhub_robot_password --query 'Parameter.Value' --output=text --with-decryption \
  #           | docker login --username robotclickhouse --password-stdin
  #     - name: Check out repository code
  #       uses: ClickHouse/checkout@v1
  #       with:
  #         ref: ${{ github.event.after }}
  #     - name: Build images
  #       run: |
  #         python3 "${GITHUB_WORKSPACE}/tests/ci/docker_images_check_by_digest.py" --suffix amd64 --tag "${{ needs.todolist.outputs.DOCKER_DIGEST }}"
  #     - name: Upload job done flag
  #       run: |
  #         FILE=".ci_${GITHUB_JOB}"
  #         touch "$FILE" && aws s3 cp "$FILE" "s3://$S3_CI_REPORTS/docker-${{ needs.todolist.outputs.DOCKER_DIGEST }}/" && rm "$FILE"
  # DockerMultiArchManifest:
  #   needs: [ToDoList, DockerBuildAmd64, DockerBuildAarch64]
  #   runs-on: [self-hosted, style-checker]
  #   if: |
  #     !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'DockerMultiArchManifest')
  #   steps:
  #     - name: Check out repository code
  #       uses: ClickHouse/checkout@v1
  #     - name: Images check
  #       run: |
  #         cd "$GITHUB_WORKSPACE/tests/ci"
  #         python3 docker_manifests_merge_by_digest.py --suffix amd64 --suffix aarch64 --tag ${{ needs.ToDoList.outputs.DOCKER_DIGEST }}
  #     - name: Upload job done flag
  #       run: |
  #         FILE=".ci_${GITHUB_JOB}"
  #         touch "$FILE" && aws s3 cp "$FILE" "s3://$S3_CI_REPORTS/docker-${{ needs.todolist.outputs.DOCKER_DIGEST }}/" && rm "$FILE"
  StyleCheck:
    needs: [ToDoList, BuildDockers]
    runs-on: [self-hosted, style-checker]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'StyleCheck')
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{ runner.temp }}/style_check
          ROBOT_CLICKHOUSE_SSH_KEY<<RCSK
          ${{secrets.ROBOT_CLICKHOUSE_SSH_KEY}}
          RCSK
          DOCKER_TAG=${{ needs.todolist.outputs.DOCKER_DIGEST }}
          EOF
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          clear-repository: true
      - name: Style Check
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 style_check.py
      - name: Upload job done flag
        run: |
          FILE=".ci_${{ github.job }}_${{ needs.ToDoList.outputs.ALL_DIGEST }}"
          touch "$FILE" && aws s3 cp "$FILE" "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/" && rm "$FILE"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FastTest:
    needs: [ToDoList, BuildDockers]
    runs-on: [self-hosted, builder]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'FastTest')
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/fasttest
          REPO_COPY=${{runner.temp}}/fasttest/ClickHouse
          CACHES_PATH=${{runner.temp}}/../ccaches
          DOCKER_TAG=${{ needs.todolist.outputs.DOCKER_DIGEST }}
          EOF
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          clear-repository: true
          ref: ${{ github.event.after }}
      - name: Fast Test
        run: |
          sudo rm -fr "$TEMP_PATH" && mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci" && python3 fast_test_check.py
      - name: Upload job done flag
        run: |
          FILE=".ci_${{ github.job }}_${{ needs.ToDoList.outputs.FAST_TEST_DIGEST }}"
          touch "$FILE" && aws s3 cp "$FILE" "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/" && rm "$FILE"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH" "$CACHES_PATH"
  CompatibilityCheckX86:
    needs: [ToDoList, BuilderDebRelease]
    runs-on: [self-hosted, style-checker]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'CompatibilityCheckX86')
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/compatibility_check
          REPO_COPY=${{runner.temp}}/compatibility_check/ClickHouse
          REPORTS_PATH=${{runner.temp}}/reports_dir
          BUILD_NAME=package_release
          EOF
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          ref: ${{ github.event.after }}
      - name: Download build report
        run: |
          mkdir -p "$REPORTS_PATH"
          aws s3 ls s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/"${BUILD_NAME}".json > /dev/null || exit 1
          aws s3 cp s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/"${BUILD_NAME}".json "$REPORTS_PATH"/
      - name: CompatibilityCheckX86
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci" && python3 compatibility_check.py --check-name "Compatibility check (amd64)" --check-glibc --check-distributions
      - name: Upload test done flag
        run: |
          FILE=".ci_${{ github.job }}"
          touch "$FILE" && aws s3 cp "$FILE" "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/" && rm "$FILE"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  CompatibilityCheckAarch64:
    needs: [ToDoList, BuilderDebAarch64]
    runs-on: [self-hosted, style-checker]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'CompatibilityCheckAarch64')
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/compatibility_check
          REPO_COPY=${{runner.temp}}/compatibility_check/ClickHouse
          REPORTS_PATH=${{runner.temp}}/reports_dir
          BUILD_NAME=package_aarch64
          EOF
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          clear-repository: true
      - name: Download build report
        run: |
          mkdir -p "$REPORTS_PATH"
          aws s3 ls "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/${BUILD_NAME}.json" || exit 1
          aws s3 cp "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/${BUILD_NAME}.json" "$REPORTS_PATH/"
      - name: CompatibilityCheckAarch64
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci" && python3 compatibility_check.py --check-name "Compatibility check (aarch64)" --check-glibc
      - name: Upload test done flag
        run: |
          FILE=".ci_${{ github.job }}"
          touch "$FILE" && aws s3 cp "$FILE" "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/" && rm "$FILE"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
#########################################################################################
#################################### ORDINARY BUILDS ####################################
#########################################################################################
  BuilderDebRelease:
    needs: [ToDoList, FastTest]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'package_release')
    uses: ./.github/workflows/reusable_build.yml
    with:
      build_name: package_release
      checkout_depth: 0
      s3_report_path: ${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH }}
      builder_tag: ${{ needs.ToDoList.outputs.DOCKER_DIGEST }}
  BuilderDebAarch64:
    needs: [FastTest, ToDoList]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'package_aarch64')
    uses: ./.github/workflows/reusable_build.yml
    with:
      build_name: package_aarch64
      checkout_depth: 0
      s3_report_path: ${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH }}
      builder_tag: ${{ needs.ToDoList.outputs.DOCKER_DIGEST }}
  BuilderBinRelease:
    needs: [ToDoList, FastTest]
    uses: ./.github/workflows/reusable_build.yml
    with:
      build_name: binary_release
      s3_report_path: ${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH }}
      builder_tag: ${{ needs.ToDoList.outputs.DOCKER_DIGEST }}
  # BuilderDebAsan:
  #   needs: [FastTest, StyleCheck]
  #   uses: ./.github/workflows/reusable_build.yml
  #   with:
  #     build_name: package_asan
  # BuilderDebUBsan:
  #   needs: [FastTest, StyleCheck]
  #   uses: ./.github/workflows/reusable_build.yml
  #   with:
  #     build_name: package_ubsan
  # BuilderDebTsan:
  #   needs: [FastTest, StyleCheck]
  #   uses: ./.github/workflows/reusable_build.yml
  #   with:
  #     build_name: package_tsan
  # BuilderDebMsan:
  #   needs: [FastTest, StyleCheck]
  #   uses: ./.github/workflows/reusable_build.yml
  #   with:
  #     build_name: package_msan
  BuilderDebDebug:
    needs: [ToDoList, StyleCheck]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'package_debug')
    uses: ./.github/workflows/reusable_build.yml
    with:
      build_name: package_debug
      builder_tag: ${{ needs.ToDoList.outputs.DOCKER_DIGEST }}
      s3_report_path: ${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH }}
# ##########################################################################################
# ##################################### SPECIAL BUILDS #####################################
# ##########################################################################################
#   BuilderBinClangTidy:
#     needs: [FastTest, StyleCheck]
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_tidy
#   BuilderBinDarwin:
#     needs: [FastTest, StyleCheck]
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_darwin
#   BuilderBinAarch64:
#     needs: [FastTest, StyleCheck]
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_aarch64
#   BuilderBinFreeBSD:
#     needs: [FastTest, StyleCheck]
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_freebsd
#   BuilderBinDarwinAarch64:
#     needs: [FastTest, StyleCheck]
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_darwin_aarch64
#   BuilderBinPPC64:
#     needs: [FastTest, StyleCheck]
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_ppc64le
#   BuilderBinAmd64Compat:
#     needs: [FastTest, StyleCheck]
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_amd64_compat
#   BuilderBinAarch64V80Compat:
#     needs: [FastTest, StyleCheck]
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_aarch64_v80compat
#   BuilderBinRISCV64:
#     needs: [FastTest, StyleCheck]
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_riscv64
#   BuilderBinS390X:
#     needs: [FastTest, StyleCheck]
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_s390x
############################################################################################
##################################### BUILD REPORTER #######################################
############################################################################################
  BuilderReport:
    needs:
      - ToDoList
      # - BuilderBinRelease
      # - BuilderDebAarch64
      # - BuilderDebAsan
      - BuilderDebDebug
      # - BuilderDebMsan
      - BuilderDebRelease
      # - BuilderDebTsan
      # - BuilderDebUBsan
    runs-on: [self-hosted, style-checker]
    if: |
      !failure() && !cancelled() && contains(fromJson(needs.ToDoList.outputs.jobs_to_do), 'package_')
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          CHECK_NAME=ClickHouse build check
          REPORTS_PATH=${{runner.temp}}/reports_dir
          NEEDS_DATA_PATH=${{runner.temp}}/needs.json
          EOF
      - name: Download build reports
        run: |
          rm -rf "$REPORTS_PATH" && mkdir -p "$REPORTS_PATH"
          aws s3 cp --recursive --exclude "*" --include "*.json"  "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/" "./$REPORTS_PATH/"
          ls "$REPORTS_PATH/*.json" || exit 1
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          ref: ${{ github.event.after }}
      - name: Report Builder
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cat > "$NEEDS_DATA_PATH" << 'EOF'
          ${{ toJSON(needs) }}
          EOF
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 build_report_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
#   BuilderSpecialReport:
#     needs:
#       - BuilderBinAarch64
#       - BuilderBinDarwin
#       - BuilderBinDarwinAarch64
#       - BuilderBinFreeBSD
#       - BuilderBinPPC64
#       - BuilderBinRISCV64
#       - BuilderBinS390X
#       - BuilderBinAmd64Compat
#       - BuilderBinAarch64V80Compat
#       - BuilderBinClangTidy
#     runs-on: [self-hosted, style-checker]
#     if: ${{ success() || failure() }}
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/report_check
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=ClickHouse special build check
#           NEEDS_DATA_PATH=${{runner.temp}}/needs.json
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Report Builder
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cat > "$NEEDS_DATA_PATH" << 'EOF'
#           ${{ toJSON(needs) }}
#           EOF
#           cd "$GITHUB_WORKSPACE/tests/ci"
#           python3 build_report_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
############################################################################################
#################################### INSTALL PACKAGES ######################################
############################################################################################
  InstallPackagesTestRelease:
    needs: [ToDoList, BuilderDebRelease]
    runs-on: [self-hosted, style-checker]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'InstallPackagesTestRelease')
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/test_install
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Install packages (amd64)
          REPO_COPY=${{runner.temp}}/test_install/ClickHouse
          BUILD_NAME=package_release
          EOF
          echo CI_DONE_FILE=".ci_$GITHUB_JOB" >> "$GITHUB_ENV"
      - name: Download build report
        run: |
          rm -rf "$REPORTS_PATH" && mkdir -p "$REPORTS_PATH"
          aws s3 cp "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/$BUILD_NAME.json" "$REPORTS_PATH/"
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          ref: ${{ github.event.after }}
      - name: Test packages installation
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 install_check.py "$CHECK_NAME"
      - name: Upload test done flag
        run: |
          touch "$CI_DONE_FILE" && aws s3 cp "$CI_DONE_FILE" "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
#   InstallPackagesTestAarch64:
#     needs: [BuilderDebAarch64]
#     runs-on: [self-hosted, style-checker-aarch64]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/test_install
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Install packages (arm64)
#           REPO_COPY=${{runner.temp}}/test_install/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Test packages installation
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 install_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
##############################################################################################
########################### FUNCTIONAl STATELESS TESTS #######################################
##############################################################################################
  FunctionalStatelessTestRelease:
    needs: [ToDoList, BuilderDebRelease]
    runs-on: [self-hosted, func-tester]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'FunctionalStatelessTestRelease')
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_release
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (release)
          REPO_COPY=${{runner.temp}}/stateless_release/ClickHouse
          BUILD_NAME=package_release
          KILL_TIMEOUT=10800
          EOF
          echo CI_DONE_FILE=".ci_${GITHUB_JOB}_${{ needs.ToDoList.outputs.STATELESS_TEST_DIGEST }}" >> "$GITHUB_ENV"
          cat "$GITHUB_ENV"
      - name: Download build report
        run: |
          rm -rf "$REPORTS_PATH" && mkdir -p "$REPORTS_PATH"
          aws s3 cp "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/$BUILD_NAME.json" "$REPORTS_PATH/"
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          ref: ${{ github.event.after }}
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH" && mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Upload test done flag
        run: |
          # FIXME: FT test digest to be added
          touch "$CI_DONE_FILE" && aws s3 cp "$CI_DONE_FILE" "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestReleaseDatabaseReplicated0:
    needs: [ToDoList, BuilderDebRelease]
    runs-on: [self-hosted, func-tester]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'FunctionalStatelessTestReleaseDatabaseReplicated0')
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_database_replicated
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (release, DatabaseReplicated)
          REPO_COPY=${{runner.temp}}/stateless_database_replicated/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=4
          BUILD_NAME=package_release
          EOF
          echo CI_DONE_FILE=".ci_${GITHUB_JOB}_${{ needs.ToDoList.outputs.STATELESS_TEST_DIGEST }}" >> "$GITHUB_ENV"
      - name: Download build report
        run: |
          rm -rf "$REPORTS_PATH" && mkdir -p "$REPORTS_PATH"
          aws s3 cp "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/$BUILD_NAME.json" "$REPORTS_PATH"
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          ref: ${{ github.event.after }}
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Upload test done flag
        run: |
          # FIXME: FT test digest to be added
          touch "$CI_DONE_FILE" && aws s3 cp "$CI_DONE_FILE" "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestReleaseDatabaseReplicated1:
#     needs: [BuilderDebRelease]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_database_replicated
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (release, DatabaseReplicated)
#           REPO_COPY=${{runner.temp}}/stateless_database_replicated/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=1
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestReleaseDatabaseReplicated2:
#     needs: [BuilderDebRelease]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_database_replicated
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (release, DatabaseReplicated)
#           REPO_COPY=${{runner.temp}}/stateless_database_replicated/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=2
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestReleaseDatabaseReplicated3:
#     needs: [BuilderDebRelease]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_database_replicated
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (release, DatabaseReplicated)
#           REPO_COPY=${{runner.temp}}/stateless_database_replicated/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=3
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestReleaseWideParts:
#     needs: [BuilderDebRelease]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_wide_parts
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (release, wide parts enabled)
#           REPO_COPY=${{runner.temp}}/stateless_wide_parts/ClickHouse
#           KILL_TIMEOUT=10800
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestReleaseAnalyzer:
#     needs: [BuilderDebRelease]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_analyzer
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (release, analyzer)
#           REPO_COPY=${{runner.temp}}/stateless_analyzer/ClickHouse
#           KILL_TIMEOUT=10800
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestReleaseS3_0:
#     needs: [BuilderDebRelease]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_s3_storage
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (release, s3 storage)
#           REPO_COPY=${{runner.temp}}/stateless_s3_storage/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=0
#           RUN_BY_HASH_TOTAL=2
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestReleaseS3_1:
#     needs: [BuilderDebRelease]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_s3_storage
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (release, s3 storage)
#           REPO_COPY=${{runner.temp}}/stateless_s3_storage/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=1
#           RUN_BY_HASH_TOTAL=2
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestS3Debug0:
    needs: [ToDoList, BuilderDebDebug]
    runs-on: [self-hosted, func-tester]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'FunctionalStatelessTestS3Debug0')
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_s3_storage_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (debug, s3 storage)
          REPO_COPY=${{runner.temp}}/stateless_s3_storage_debug/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=6
          BUILD_NAME=package_debug
          EOF
          echo CI_DONE_FILE=".ci_${GITHUB_JOB}_${{ needs.ToDoList.outputs.STATELESS_TEST_DIGEST }}" >> "$GITHUB_ENV"
      - name: Download build report
        run: |
          rm -rf "$REPORTS_PATH" && mkdir -p "$REPORTS_PATH"
          aws s3 cp "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/$BUILD_NAME.json" "$REPORTS_PATH/"
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          ref: ${{ github.event.after }}
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Upload test done flag
        run: |
          # FIXME: FT test digest to be added
          touch "$CI_DONE_FILE" && aws s3 cp "$CI_DONE_FILE" "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestS3Debug1:
#     needs: [BuilderDebDebug]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_s3_storage_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (debug, s3 storage)
#           REPO_COPY=${{runner.temp}}/stateless_s3_storage_debug/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=1
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestS3Debug2:
#     needs: [BuilderDebDebug]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_s3_storage_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (debug, s3 storage)
#           REPO_COPY=${{runner.temp}}/stateless_s3_storage_debug/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=2
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestS3Debug3:
#     needs: [BuilderDebDebug]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_s3_storage_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (debug, s3 storage)
#           REPO_COPY=${{runner.temp}}/stateless_s3_storage_debug/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=3
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestS3Debug4:
#     needs: [BuilderDebDebug]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_s3_storage_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (debug, s3 storage)
#           REPO_COPY=${{runner.temp}}/stateless_s3_storage_debug/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=4
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestS3Debug5:
#     needs: [BuilderDebDebug]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_s3_storage_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (debug, s3 storage)
#           REPO_COPY=${{runner.temp}}/stateless_s3_storage_debug/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=5
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestS3Tsan0:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_s3_storage_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (tsan, s3 storage)
#           REPO_COPY=${{runner.temp}}/stateless_s3_storage_tsan/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=0
#           RUN_BY_HASH_TOTAL=5
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestS3Tsan1:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_s3_storage_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (tsan, s3 storage)
#           REPO_COPY=${{runner.temp}}/stateless_s3_storage_tsan/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=1
#           RUN_BY_HASH_TOTAL=5
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestS3Tsan2:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_s3_storage_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (tsan, s3 storage)
#           REPO_COPY=${{runner.temp}}/stateless_s3_storage_tsan/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=2
#           RUN_BY_HASH_TOTAL=5
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestS3Tsan3:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_s3_storage_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (tsan, s3 storage)
#           REPO_COPY=${{runner.temp}}/stateless_s3_storage_tsan/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=3
#           RUN_BY_HASH_TOTAL=5
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestS3Tsan4:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_s3_storage_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (tsan, s3 storage)
#           REPO_COPY=${{runner.temp}}/stateless_s3_storage_tsan/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=4
#           RUN_BY_HASH_TOTAL=5
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestAarch64:
#     needs: [BuilderDebAarch64]
#     runs-on: [self-hosted, func-tester-aarch64]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_release
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (aarch64)
#           REPO_COPY=${{runner.temp}}/stateless_release/ClickHouse
#           KILL_TIMEOUT=10800
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestAsan0:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (asan)
#           REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=0
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestAsan1:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (asan)
#           REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=1
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestAsan2:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (asan)
#           REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=2
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestAsan3:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (asan)
#           REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=3
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestTsan0:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (tsan)
#           REPO_COPY=${{runner.temp}}/stateless_tsan/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=0
#           RUN_BY_HASH_TOTAL=5
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestTsan1:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (tsan)
#           REPO_COPY=${{runner.temp}}/stateless_tsan/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=1
#           RUN_BY_HASH_TOTAL=5
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestTsan2:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (tsan)
#           REPO_COPY=${{runner.temp}}/stateless_tsan/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=2
#           RUN_BY_HASH_TOTAL=5
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestTsan3:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (tsan)
#           REPO_COPY=${{runner.temp}}/stateless_tsan/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=3
#           RUN_BY_HASH_TOTAL=5
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestTsan4:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (tsan)
#           REPO_COPY=${{runner.temp}}/stateless_tsan/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=4
#           RUN_BY_HASH_TOTAL=5
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestUBsan0:
#     needs: [BuilderDebUBsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_ubsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (ubsan)
#           REPO_COPY=${{runner.temp}}/stateless_ubsan/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=0
#           RUN_BY_HASH_TOTAL=2
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestUBsan1:
#     needs: [BuilderDebUBsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_ubsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (ubsan)
#           REPO_COPY=${{runner.temp}}/stateless_ubsan/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=1
#           RUN_BY_HASH_TOTAL=2
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestMsan0:
#     needs: [BuilderDebMsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_memory
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (msan)
#           REPO_COPY=${{runner.temp}}/stateless_memory/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=0
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestMsan1:
#     needs: [BuilderDebMsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_memory
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (msan)
#           REPO_COPY=${{runner.temp}}/stateless_memory/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=1
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestMsan2:
#     needs: [BuilderDebMsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_memory
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (msan)
#           REPO_COPY=${{runner.temp}}/stateless_memory/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=2
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestMsan3:
#     needs: [BuilderDebMsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_memory
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (msan)
#           REPO_COPY=${{runner.temp}}/stateless_memory/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=3
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestMsan4:
#     needs: [BuilderDebMsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_memory
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (msan)
#           REPO_COPY=${{runner.temp}}/stateless_memory/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=4
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestMsan5:
#     needs: [BuilderDebMsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_memory
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (msan)
#           REPO_COPY=${{runner.temp}}/stateless_memory/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=5
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestDebug0:
#     needs: [BuilderDebDebug]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (debug)
#           REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=0
#           RUN_BY_HASH_TOTAL=5
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestDebug1:
#     needs: [BuilderDebDebug]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (debug)
#           REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=1
#           RUN_BY_HASH_TOTAL=5
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestDebug2:
#     needs: [BuilderDebDebug]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (debug)
#           REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=2
#           RUN_BY_HASH_TOTAL=5
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestDebug3:
#     needs: [BuilderDebDebug]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (debug)
#           REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=3
#           RUN_BY_HASH_TOTAL=5
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestDebug4:
#     needs: [BuilderDebDebug]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests (debug)
#           REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
#           KILL_TIMEOUT=10800
#           RUN_BY_HASH_NUM=4
#           RUN_BY_HASH_TOTAL=5
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatelessTestFlakyCheck:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateless_flaky_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateless tests flaky check (asan)
#           REPO_COPY=${{runner.temp}}/stateless_flaky_asan/ClickHouse
#           KILL_TIMEOUT=3600
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   TestsBugfixCheck:
#     needs: [CheckLabels, StyleCheck]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/tests_bugfix_check
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=tests bugfix validate check
#           KILL_TIMEOUT=3600
#           REPO_COPY=${{runner.temp}}/tests_bugfix_check/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Bugfix test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"

#           TEMP_PATH="${TEMP_PATH}/integration" \
#             REPORTS_PATH="${REPORTS_PATH}/integration" \
#             python3 integration_test_check.py "Integration $CHECK_NAME" \
#               --validate-bugfix --post-commit-status=file || echo 'ignore exit code'

#           TEMP_PATH="${TEMP_PATH}/stateless" \
#             REPORTS_PATH="${REPORTS_PATH}/stateless" \
#             python3 functional_test_check.py "Stateless $CHECK_NAME" "$KILL_TIMEOUT" \
#               --validate-bugfix --post-commit-status=file || echo 'ignore exit code'

#           python3 bugfix_validate_check.py "${TEMP_PATH}/stateless/functional_commit_status.tsv" "${TEMP_PATH}/integration/integration_commit_status.tsv"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
##############################################################################################
############################ FUNCTIONAl STATEFUL TESTS #######################################
##############################################################################################
  FunctionalStatefulTestRelease:
    needs: [ToDoList, BuilderDebRelease]
    runs-on: [self-hosted, func-tester]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'FunctionalStatefulTestRelease')
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateful_release
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateful tests (release)
          REPO_COPY=${{runner.temp}}/stateful_release/ClickHouse
          KILL_TIMEOUT=3600
          BUILD_NAME=package_release
          EOF
          echo CI_DONE_FILE=".ci_${GITHUB_JOB}_${{ needs.ToDoList.outputs.STATEFUL_TEST_DIGEST }}" >> "$GITHUB_ENV"
          cat "$GITHUB_ENV"
      - name: Download build report
        run: |
          rm -rf "$REPORTS_PATH" && mkdir -p "$REPORTS_PATH"
          aws s3 cp "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/$BUILD_NAME.json" "$REPORTS_PATH/"
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          ref: ${{ github.event.after }}
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Upload test done flag
        run: |
          # FIXME: test digest to be added
          touch "$CI_DONE_FILE" && aws s3 cp "$CI_DONE_FILE" "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
#   FunctionalStatefulTestAarch64:
#     needs: [BuilderDebAarch64]
#     runs-on: [self-hosted, func-tester-aarch64]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateful_release
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateful tests (aarch64)
#           REPO_COPY=${{runner.temp}}/stateful_release/ClickHouse
#           KILL_TIMEOUT=3600
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatefulTestAsan:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateful_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateful tests (asan)
#           REPO_COPY=${{runner.temp}}/stateful_debug/ClickHouse
#           KILL_TIMEOUT=3600
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatefulTestTsan:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateful_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateful tests (tsan)
#           REPO_COPY=${{runner.temp}}/stateful_tsan/ClickHouse
#           KILL_TIMEOUT=3600
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatefulTestMsan:
#     needs: [BuilderDebMsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateful_msan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateful tests (msan)
#           REPO_COPY=${{runner.temp}}/stateful_msan/ClickHouse
#           KILL_TIMEOUT=3600
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatefulTestUBsan:
#     needs: [BuilderDebUBsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateful_ubsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateful tests (ubsan)
#           REPO_COPY=${{runner.temp}}/stateful_ubsan/ClickHouse
#           KILL_TIMEOUT=3600
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatefulTestDebug:
#     needs: [BuilderDebDebug]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateful_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateful tests (debug)
#           REPO_COPY=${{runner.temp}}/stateful_debug/ClickHouse
#           KILL_TIMEOUT=3600
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   # Parallel replicas
#   FunctionalStatefulTestDebugParallelReplicas:
#     needs: [BuilderDebDebug]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateful_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateful tests (debug, ParallelReplicas)
#           REPO_COPY=${{runner.temp}}/stateful_debug/ClickHouse
#           KILL_TIMEOUT=3600
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v2
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Clear repository
#         run: |
#           sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
#       - name: Check out repository code
#         uses: actions/checkout@v2
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatefulTestUBsanParallelReplicas:
#     needs: [BuilderDebUBsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateful_ubsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateful tests (ubsan, ParallelReplicas)
#           REPO_COPY=${{runner.temp}}/stateful_ubsan/ClickHouse
#           KILL_TIMEOUT=3600
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v2
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Clear repository
#         run: |
#           sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
#       - name: Check out repository code
#         uses: actions/checkout@v2
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatefulTestMsanParallelReplicas:
#     needs: [BuilderDebMsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateful_msan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateful tests (msan, ParallelReplicas)
#           REPO_COPY=${{runner.temp}}/stateful_msan/ClickHouse
#           KILL_TIMEOUT=3600
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v2
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Clear repository
#         run: |
#           sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
#       - name: Check out repository code
#         uses: actions/checkout@v2
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatefulTestTsanParallelReplicas:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateful_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateful tests (tsan, ParallelReplicas)
#           REPO_COPY=${{runner.temp}}/stateful_tsan/ClickHouse
#           KILL_TIMEOUT=3600
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v2
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Clear repository
#         run: |
#           sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
#       - name: Check out repository code
#         uses: actions/checkout@v2
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatefulTestAsanParallelReplicas:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateful_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateful tests (asan, ParallelReplicas)
#           REPO_COPY=${{runner.temp}}/stateful_debug/ClickHouse
#           KILL_TIMEOUT=3600
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v2
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Clear repository
#         run: |
#           sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
#       - name: Check out repository code
#         uses: actions/checkout@v2
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   FunctionalStatefulTestReleaseParallelReplicas:
#     needs: [BuilderDebRelease]
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stateful_release
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stateful tests (release, ParallelReplicas)
#           REPO_COPY=${{runner.temp}}/stateful_release/ClickHouse
#           KILL_TIMEOUT=3600
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v2
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Clear repository
#         run: |
#           sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
#       - name: Check out repository code
#         uses: actions/checkout@v2
#       - name: Functional test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
# ##############################################################################################
# ######################################### STRESS TESTS #######################################
# ##############################################################################################
#   StressTestAsan:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stress_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stress test (asan)
#           REPO_COPY=${{runner.temp}}/stress_asan/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Stress test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 stress_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   StressTestTsan:
#     needs: [BuilderDebTsan]
#     # func testers have 16 cores + 128 GB memory
#     # while stress testers have 36 cores + 72 memory
#     # It would be better to have something like 32 + 128,
#     # but such servers almost unavailable as spot instances.
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stress_thread
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stress test (tsan)
#           REPO_COPY=${{runner.temp}}/stress_thread/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Stress test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 stress_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   StressTestMsan:
#     needs: [BuilderDebMsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stress_memory
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stress test (msan)
#           REPO_COPY=${{runner.temp}}/stress_memory/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Stress test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 stress_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   StressTestUBsan:
#     needs: [BuilderDebUBsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/stress_undefined
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Stress test (ubsan)
#           REPO_COPY=${{runner.temp}}/stress_undefined/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Stress test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 stress_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
  StressTestDebug:
    needs: [ToDoList, BuilderDebDebug]
    runs-on: [self-hosted, stress-tester]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'StressTestDebug')
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stress_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stress test (debug)
          REPO_COPY=${{runner.temp}}/stress_debug/ClickHouse
          BUILD_NAME=package_debug
          EOF
      - name: Download build report
        run: |
          rm -rf "$REPORTS_PATH" && mkdir -p "$REPORTS_PATH"
          aws s3 cp "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/$BUILD_NAME.json" "$REPORTS_PATH/"
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          ref: ${{ github.event.after }}
      - name: Stress test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 stress_check.py "$CHECK_NAME"
      - name: Upload job done flag
        run: |
          FILE=".ci_${{ github.job }}_${{ needs.ToDoList.outputs.STRESS_TEST_DIGEST }}"
          touch "$FILE" && aws s3 cp "$FILE" "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/" && rm "$FILE"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
#   ##############################################################################################
#   ######################################### UPGRADE CHECK ######################################
#   ##############################################################################################
#   UpgradeCheckAsan:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/upgrade_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Upgrade check (asan)
#           REPO_COPY=${{runner.temp}}/upgrade_asan/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Upgrade check
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 upgrade_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   UpgradeCheckTsan:
#     needs: [BuilderDebTsan]
#     # same as for stress test with tsan
#     runs-on: [self-hosted, func-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/upgrade_thread
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Upgrade check (tsan)
#           REPO_COPY=${{runner.temp}}/upgrade_thread/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Upgrade check
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 upgrade_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   UpgradeCheckMsan:
#     needs: [BuilderDebMsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/upgrade_memory
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Upgrade check (msan)
#           REPO_COPY=${{runner.temp}}/upgrade_memory/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Upgrade check
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 upgrade_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
  UpgradeCheckDebug:
    needs: [ToDoList, BuilderDebDebug]
    runs-on: [self-hosted, stress-tester]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'UpgradeCheckDebug')
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/upgrade_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Upgrade check (debug)
          REPO_COPY=${{runner.temp}}/upgrade_debug/ClickHouse
          BUILD_NAME=package_debug
          EOF
          echo CI_DONE_FILE=".ci_$GITHUB_JOB" >> "$GITHUB_ENV"
      - name: Download build report
        run: |
          rm -rf "$REPORTS_PATH" && mkdir -p "$REPORTS_PATH"
          aws s3 cp "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/$BUILD_NAME.json" "$REPORTS_PATH/"
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          ref: ${{ github.event.after }}
      - name: Upgrade check
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 upgrade_check.py "$CHECK_NAME"
      - name: Upload test done flag
        run: touch "$CI_DONE_FILE" && aws s3 cp "$CI_DONE_FILE" "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
# ##############################################################################################
# ##################################### AST FUZZERS ############################################
# ##############################################################################################
#   ASTFuzzerTestAsan:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, fuzzer-unit-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/ast_fuzzer_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=AST fuzzer (asan)
#           REPO_COPY=${{runner.temp}}/ast_fuzzer_asan/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Fuzzer
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 ast_fuzzer_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   ASTFuzzerTestTsan:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, fuzzer-unit-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/ast_fuzzer_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=AST fuzzer (tsan)
#           REPO_COPY=${{runner.temp}}/ast_fuzzer_tsan/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Fuzzer
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 ast_fuzzer_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   ASTFuzzerTestUBSan:
#     needs: [BuilderDebUBsan]
#     runs-on: [self-hosted, fuzzer-unit-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/ast_fuzzer_ubsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=AST fuzzer (ubsan)
#           REPO_COPY=${{runner.temp}}/ast_fuzzer_ubsan/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Fuzzer
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 ast_fuzzer_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   ASTFuzzerTestMSan:
#     needs: [BuilderDebMsan]
#     runs-on: [self-hosted, fuzzer-unit-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/ast_fuzzer_msan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=AST fuzzer (msan)
#           REPO_COPY=${{runner.temp}}/ast_fuzzer_msan/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Fuzzer
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 ast_fuzzer_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   ASTFuzzerTestDebug:
#     needs: [BuilderDebDebug]
#     runs-on: [self-hosted, fuzzer-unit-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/ast_fuzzer_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=AST fuzzer (debug)
#           REPO_COPY=${{runner.temp}}/ast_fuzzer_debug/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Fuzzer
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 ast_fuzzer_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
# #############################################################################################
# ############################# INTEGRATION TESTS #############################################
# #############################################################################################
#   IntegrationTestsAsan0:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (asan)
#           REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
#           RUN_BY_HASH_NUM=0
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsAsan1:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (asan)
#           REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
#           RUN_BY_HASH_NUM=1
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsAsan2:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (asan)
#           REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
#           RUN_BY_HASH_NUM=2
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsAsan3:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (asan)
#           REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
#           RUN_BY_HASH_NUM=3
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsAsan4:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (asan)
#           REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
#           RUN_BY_HASH_NUM=4
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsAsan5:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (asan)
#           REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
#           RUN_BY_HASH_NUM=5
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsAnalyzerAsan0:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (asan, analyzer)
#           REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
#           RUN_BY_HASH_NUM=0
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsAnalyzerAsan1:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (asan, analyzer)
#           REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
#           RUN_BY_HASH_NUM=1
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsAnalyzerAsan2:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (asan, analyzer)
#           REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
#           RUN_BY_HASH_NUM=2
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsAnalyzerAsan3:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (asan, analyzer)
#           REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
#           RUN_BY_HASH_NUM=3
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsAnalyzerAsan4:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (asan, analyzer)
#           REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
#           RUN_BY_HASH_NUM=4
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsAnalyzerAsan5:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (asan, analyzer)
#           REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
#           RUN_BY_HASH_NUM=5
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsTsan0:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (tsan)
#           REPO_COPY=${{runner.temp}}/integration_tests_tsan/ClickHouse
#           RUN_BY_HASH_NUM=0
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsTsan1:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (tsan)
#           REPO_COPY=${{runner.temp}}/integration_tests_tsan/ClickHouse
#           RUN_BY_HASH_NUM=1
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsTsan2:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (tsan)
#           REPO_COPY=${{runner.temp}}/integration_tests_tsan/ClickHouse
#           RUN_BY_HASH_NUM=2
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsTsan3:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (tsan)
#           REPO_COPY=${{runner.temp}}/integration_tests_tsan/ClickHouse
#           RUN_BY_HASH_NUM=3
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsTsan4:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (tsan)
#           REPO_COPY=${{runner.temp}}/integration_tests_tsan/ClickHouse
#           RUN_BY_HASH_NUM=4
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsTsan5:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (tsan)
#           REPO_COPY=${{runner.temp}}/integration_tests_tsan/ClickHouse
#           RUN_BY_HASH_NUM=5
#           RUN_BY_HASH_TOTAL=6
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
  IntegrationTestsRelease0:
    needs: [ToDoList, BuilderDebRelease]
    runs-on: [self-hosted, stress-tester]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'IntegrationTestsRelease0')
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_release
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (release)
          REPO_COPY=${{runner.temp}}/integration_tests_release/ClickHouse
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=4
          BUILD_NAME=package_release
          EOF
      - name: Download build report
        run: |
          rm -rf "$REPORTS_PATH" && mkdir -p "$REPORTS_PATH"
          aws s3 cp "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/$BUILD_NAME.json" "$REPORTS_PATH/"
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          ref: ${{ github.event.after }}
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Upload test done flag
        run: |
          FILE=.ci_${{ github.job }}_${{ needs.ToDoList.outputs.INTEGRATION_TEST_DIGEST }}
          touch "$FILE" && aws s3 cp "$FILE" "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/" && rm $FILE
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsRelease1:
#     needs: [BuilderDebRelease]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_release
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (release)
#           REPO_COPY=${{runner.temp}}/integration_tests_release/ClickHouse
#           RUN_BY_HASH_NUM=1
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsRelease2:
#     needs: [BuilderDebRelease]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_release
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (release)
#           REPO_COPY=${{runner.temp}}/integration_tests_release/ClickHouse
#           RUN_BY_HASH_NUM=2
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsRelease3:
#     needs: [BuilderDebRelease]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_release
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests (release)
#           REPO_COPY=${{runner.temp}}/integration_tests_release/ClickHouse
#           RUN_BY_HASH_NUM=3
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   IntegrationTestsFlakyCheck:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/integration_tests_asan_flaky_check
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Integration tests flaky check (asan)
#           REPO_COPY=${{runner.temp}}/integration_tests_asan_flaky_check/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Integration test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 integration_test_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
# #############################################################################################
# #################################### UNIT TESTS #############################################
# #############################################################################################
#   UnitTestsAsan:
#     needs: [BuilderDebAsan]
#     runs-on: [self-hosted, fuzzer-unit-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/unit_tests_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Unit tests (asan)
#           REPO_COPY=${{runner.temp}}/unit_tests_asan/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Unit test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 unit_tests_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   UnitTestsReleaseClang:
#     needs: [BuilderBinRelease]
#     runs-on: [self-hosted, fuzzer-unit-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/unit_tests_asan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Unit tests (release)
#           REPO_COPY=${{runner.temp}}/unit_tests_asan/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Unit test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 unit_tests_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   UnitTestsTsan:
#     needs: [BuilderDebTsan]
#     runs-on: [self-hosted, fuzzer-unit-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/unit_tests_tsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Unit tests (tsan)
#           REPO_COPY=${{runner.temp}}/unit_tests_tsan/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Unit test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 unit_tests_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   UnitTestsMsan:
#     needs: [BuilderDebMsan]
#     runs-on: [self-hosted, fuzzer-unit-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/unit_tests_msan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Unit tests (msan)
#           REPO_COPY=${{runner.temp}}/unit_tests_msan/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Unit test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 unit_tests_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   UnitTestsUBsan:
#     needs: [BuilderDebUBsan]
#     runs-on: [self-hosted, fuzzer-unit-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/unit_tests_ubsan
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Unit tests (ubsan)
#           REPO_COPY=${{runner.temp}}/unit_tests_ubsan/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Unit test
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 unit_tests_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#############################################################################################
#################################### PERFORMANCE TESTS ######################################
#############################################################################################
  PerformanceComparisonX86_0:
    needs: [ToDoList, BuilderDebRelease]
    runs-on: [self-hosted, stress-tester]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'PerformanceComparisonX86_0')
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/performance_comparison
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Performance Comparison
          REPO_COPY=${{runner.temp}}/performance_comparison/ClickHouse
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=4
          BUILD_NAME=package_release
          EOF
          echo CI_DONE_FILE=".ci_$GITHUB_JOB" >> "$GITHUB_ENV"
      - name: Download build report
        run: |
          rm -rf "$REPORTS_PATH" && mkdir -p "$REPORTS_PATH"
          aws s3 cp "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/$BUILD_NAME.json" "$REPORTS_PATH/"
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          ref: ${{ github.event.after }}
      - name: Performance Comparison
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 performance_comparison_check.py "$CHECK_NAME"
      - name: Upload test done flag
        run: touch "$CI_DONE_FILE" && aws s3 cp "$CI_DONE_FILE" "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
#   PerformanceComparisonX86-1:
#     needs: [BuilderDebRelease]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/performance_comparison
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Performance Comparison
#           REPO_COPY=${{runner.temp}}/performance_comparison/ClickHouse
#           RUN_BY_HASH_NUM=1
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Performance Comparison
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 performance_comparison_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   PerformanceComparisonX86-2:
#     needs: [BuilderDebRelease]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/performance_comparison
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Performance Comparison
#           REPO_COPY=${{runner.temp}}/performance_comparison/ClickHouse
#           RUN_BY_HASH_NUM=2
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Performance Comparison
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 performance_comparison_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   PerformanceComparisonX86-3:
#     needs: [BuilderDebRelease]
#     runs-on: [self-hosted, stress-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/performance_comparison
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Performance Comparison
#           REPO_COPY=${{runner.temp}}/performance_comparison/ClickHouse
#           RUN_BY_HASH_NUM=3
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Performance Comparison
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 performance_comparison_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   PerformanceComparisonAarch-0:
#     needs: [BuilderDebAarch64]
#     runs-on: [self-hosted, func-tester-aarch64]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/performance_comparison
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Performance Comparison Aarch64
#           REPO_COPY=${{runner.temp}}/performance_comparison/ClickHouse
#           RUN_BY_HASH_NUM=0
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Performance Comparison
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 performance_comparison_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   PerformanceComparisonAarch-1:
#     needs: [BuilderDebAarch64]
#     runs-on: [self-hosted, func-tester-aarch64]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/performance_comparison
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Performance Comparison Aarch64
#           REPO_COPY=${{runner.temp}}/performance_comparison/ClickHouse
#           RUN_BY_HASH_NUM=1
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Performance Comparison
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 performance_comparison_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   PerformanceComparisonAarch-2:
#     needs: [BuilderDebAarch64]
#     runs-on: [self-hosted, func-tester-aarch64]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/performance_comparison
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Performance Comparison Aarch64
#           REPO_COPY=${{runner.temp}}/performance_comparison/ClickHouse
#           RUN_BY_HASH_NUM=2
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Performance Comparison
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 performance_comparison_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   PerformanceComparisonAarch-3:
#     needs: [BuilderDebAarch64]
#     runs-on: [self-hosted, func-tester-aarch64]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/performance_comparison
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=Performance Comparison Aarch64
#           REPO_COPY=${{runner.temp}}/performance_comparison/ClickHouse
#           RUN_BY_HASH_NUM=3
#           RUN_BY_HASH_TOTAL=4
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: Performance Comparison
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 performance_comparison_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
# ##############################################################################################
# ###################################### SQLANCER FUZZERS ######################################
# ##############################################################################################
#   SQLancerTestRelease:
#     needs: [BuilderDebRelease]
#     runs-on: [self-hosted, fuzzer-unit-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/sqlancer_release
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=SQLancer (release)
#           REPO_COPY=${{runner.temp}}/sqlancer_release/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: SQLancer
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 sqlancer_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#   SQLancerTestDebug:
#     needs: [BuilderDebDebug]
#     runs-on: [self-hosted, fuzzer-unit-tester]
#     steps:
#       - name: Set envs
#         run: |
#           cat >> "$GITHUB_ENV" << 'EOF'
#           TEMP_PATH=${{runner.temp}}/sqlancer_debug
#           REPORTS_PATH=${{runner.temp}}/reports_dir
#           CHECK_NAME=SQLancer (debug)
#           REPO_COPY=${{runner.temp}}/sqlancer_debug/ClickHouse
#           EOF
#       - name: Download json reports
#         uses: actions/download-artifact@v3
#         with:
#           path: ${{ env.REPORTS_PATH }}
#       - name: Check out repository code
#         uses: ClickHouse/checkout@v1
#         with:
#           clear-repository: true
#       - name: SQLancer
#         run: |
#           sudo rm -fr "$TEMP_PATH"
#           mkdir -p "$TEMP_PATH"
#           cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#           cd "$REPO_COPY/tests/ci"
#           python3 sqlancer_check.py "$CHECK_NAME"
#       - name: Cleanup
#         if: always()
#         run: |
#           docker ps --quiet | xargs --no-run-if-empty docker kill ||:
#           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
#           sudo rm -fr "$TEMP_PATH"
#############################################################################################
###################################### JEPSEN TESTS #########################################
#############################################################################################
  Jepsen:
    # This is special test NOT INCLUDED in FinishCheck
    # When it's skipped, all dependent tasks will be skipped too.
    # DO NOT add it there
    if: contains(github.event.pull_request.labels.*.name, 'jepsen-test')
    needs: [BuilderBinRelease]
    uses: ./.github/workflows/jepsen.yml
  FinishCheck:
    needs:
      - StyleCheck
      # - DockerHubPush
      # - DockerServerImages
      # - CheckLabels
      # - BuilderReport
      # - BuilderSpecialReport
      # - FastTest
      # - FunctionalStatelessTestDebug0
      # - FunctionalStatelessTestDebug1
      # - FunctionalStatelessTestDebug2
      # - FunctionalStatelessTestDebug3
      # - FunctionalStatelessTestDebug4
      # - FunctionalStatelessTestRelease
      # - FunctionalStatelessTestReleaseDatabaseReplicated0
      # - FunctionalStatelessTestReleaseDatabaseReplicated1
      # - FunctionalStatelessTestReleaseDatabaseReplicated2
      # - FunctionalStatelessTestReleaseDatabaseReplicated3
      # - FunctionalStatelessTestReleaseWideParts
      # - FunctionalStatelessTestReleaseAnalyzer
      # - FunctionalStatelessTestAarch64
      # - FunctionalStatelessTestAsan0
      # - FunctionalStatelessTestAsan1
      # - FunctionalStatelessTestAsan2
      # - FunctionalStatelessTestAsan3
      # - FunctionalStatelessTestTsan0
      # - FunctionalStatelessTestTsan1
      # - FunctionalStatelessTestTsan2
      # - FunctionalStatelessTestTsan3
      # - FunctionalStatelessTestTsan4
      # - FunctionalStatelessTestMsan0
      # - FunctionalStatelessTestMsan1
      # - FunctionalStatelessTestMsan2
      # - FunctionalStatelessTestMsan3
      # - FunctionalStatelessTestMsan4
      # - FunctionalStatelessTestMsan5
      # - FunctionalStatelessTestUBsan0
      # - FunctionalStatelessTestUBsan1
      # - FunctionalStatefulTestDebug
      # - FunctionalStatefulTestRelease
      # - FunctionalStatefulTestAarch64
      # - FunctionalStatefulTestAsan
      # - FunctionalStatefulTestTsan
      # - FunctionalStatefulTestMsan
      # - FunctionalStatefulTestUBsan
      # - FunctionalStatelessTestReleaseS3_0
      # - FunctionalStatelessTestReleaseS3_1
      # - FunctionalStatelessTestS3Debug0
      # - FunctionalStatelessTestS3Debug1
      # - FunctionalStatelessTestS3Debug2
      # - FunctionalStatelessTestS3Debug4
      # - FunctionalStatelessTestS3Debug5
      # - FunctionalStatelessTestS3Tsan0
      # - FunctionalStatelessTestS3Tsan1
      # - FunctionalStatelessTestS3Tsan2
      # - FunctionalStatelessTestS3Tsan4
      # - StressTestDebug
      # - StressTestAsan
      # - StressTestTsan
      # - StressTestMsan
      # - StressTestUBsan
      # - ASTFuzzerTestDebug
      # - ASTFuzzerTestAsan
      # - ASTFuzzerTestTsan
      # - ASTFuzzerTestMSan
      # - ASTFuzzerTestUBSan
      # - IntegrationTestsAsan0
      # - IntegrationTestsAsan1
      # - IntegrationTestsAsan2
      # - IntegrationTestsAsan3
      # - IntegrationTestsAsan4
      # - IntegrationTestsAsan5
      # - IntegrationTestsAnalyzerAsan0
      # - IntegrationTestsAnalyzerAsan1
      # - IntegrationTestsAnalyzerAsan2
      # - IntegrationTestsAnalyzerAsan3
      # - IntegrationTestsAnalyzerAsan4
      # - IntegrationTestsAnalyzerAsan5
      # - IntegrationTestsRelease0
      # - IntegrationTestsRelease1
      # - IntegrationTestsRelease2
      # - IntegrationTestsRelease3
      # - IntegrationTestsTsan0
      # - IntegrationTestsTsan1
      # - IntegrationTestsTsan2
      # - IntegrationTestsTsan3
      # - IntegrationTestsTsan4
      # - IntegrationTestsTsan5
      # - PerformanceComparisonX86-0
      # - PerformanceComparisonX86-1
      # - PerformanceComparisonX86-2
      # - PerformanceComparisonX86-3
      # - PerformanceComparisonAarch-0
      # - PerformanceComparisonAarch-1
      # - PerformanceComparisonAarch-2
      # - PerformanceComparisonAarch-3
      # - UnitTestsAsan
      # - UnitTestsTsan
      # - UnitTestsMsan
      # - UnitTestsUBsan
      # - UnitTestsReleaseClang
      # - CompatibilityCheckX86
      # - CompatibilityCheckAarch64
      # - IntegrationTestsFlakyCheck
      # - SQLancerTestRelease
      # - SQLancerTestDebug
    runs-on: [self-hosted, style-checker]
    steps:
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
      - name: Finish label
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 finish_check.py
          python3 merge_pr.py --check-approved
#############################################################################################
####################################### libFuzzer ###########################################
#############################################################################################
  libFuzzer:
    if: contains(github.event.pull_request.labels.*.name, 'libFuzzer')
    needs: [StyleCheck]
    uses: ./.github/workflows/libfuzzer.yml
##############################################################################################
############################ SQLLOGIC TEST ###################################################
##############################################################################################
  SQLLogicTestRelease:
    needs: [ToDoList, BuilderDebRelease]
    runs-on: [self-hosted, func-tester]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'SQLLogicTestRelease')
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/sqllogic_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Sqllogic test (release)
          REPO_COPY=${{runner.temp}}/sqllogic_debug/ClickHouse
          KILL_TIMEOUT=10800
          BUILD_NAME=package_release
          EOF
          echo "CI_DONE_FILE=.ci_$GITHUB_JOB" >> "$GITHUB_ENV"
      - name: Download build report
        run: |
          rm -rf "$REPORTS_PATH" && mkdir -p "$REPORTS_PATH"
          aws s3 cp "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/$BUILD_NAME.json" "$REPORTS_PATH/"
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.after }}
      - name: Sqllogic test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 sqllogic_test.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Upload test done flag
        run: touch "$CI_DONE_FILE" && aws s3 cp "$CI_DONE_FILE" "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
##############################################################################################
##################################### SQL TEST ###############################################
##############################################################################################
  SQLTest:
    needs: [ToDoList, BuilderDebRelease]
    runs-on: [self-hosted, fuzzer-unit-tester]
    if: |
      !failure() && !cancelled() && !contains(fromJson(needs.ToDoList.outputs.jobs_to_skip), 'SQLTest')
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/sqltest
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=SQLTest
          REPO_COPY=${{runner.temp}}/sqltest/ClickHouse
          BUILD_NAME=package_release
          EOF
          echo "CI_DONE_FILE=.ci_$GITHUB_JOB" >> "$GITHUB_ENV"
      - name: Download build report
        run: |
          rm -rf "$REPORTS_PATH" && mkdir -p "$REPORTS_PATH"
          aws s3 cp "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/$BUILD_NAME.json" "$REPORTS_PATH/"
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          clear-repository: true
      - name: SQLTest
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 sqltest.py "$CHECK_NAME"
      - name: Upload test done flag
        run: touch "$CI_DONE_FILE" && aws s3 cp "$CI_DONE_FILE" "s3://${{ needs.ToDoList.outputs.S3_BUILD_REPORT_PATH}}/"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
